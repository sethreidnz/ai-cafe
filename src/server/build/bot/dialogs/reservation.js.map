{"version":3,"sources":["../../../src/bot/dialogs/reservation.js"],"names":["builder","require","registerReservationDialog","bot","dialog","RESERVATION_DIALOG_NAME","session","args","next","dialogData","reservation","reservationDate","EntityRecognizer","findEntity","entities","DATE_TIME","Prompts","time","date","results","parseTime","response","entity","number","groupSize","text","name","reservationDetails","addItem","endDialog"],"mappings":";;;;;;;AACA;;AACA;;AAFA,IAAMA,UAAUC,QAAQ,YAAR,CAAhB;;;AAIA,IAAMC,4BAA4B,SAA5BA,yBAA4B,MAAO;AACvCC,MAAIC,MAAJ,CAAWC,uBAAX,EAAoC,CAClC,UAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,EAAyB;AACvBF,YAAQG,UAAR,CAAmBC,WAAnB,GAAiC,EAAjC;AACA,QAAMC,kBAAkBX,QAAQY,gBAAR,CAAyBC,UAAzB,CAAoCN,KAAKO,QAAzC,EAAmD,wBAAaC,SAAhE,CAAxB;AACA,QAAI,CAACJ,eAAL,EAAsB;AACpBX,cAAQgB,OAAR,CAAgBC,IAAhB,CAAqBX,OAArB,EAA8B,qEAA9B;AACD,KAFD,MAEO;AACLA,cAAQG,UAAR,CAAmBC,WAAnB,CAA+BQ,IAA/B,GAAsCP,eAAtC;AACAH;AACD;AACF,GAViC,EAWlC,UAACF,OAAD,EAAUa,OAAV,EAAsB;AACpB,QAAI,CAACb,QAAQG,UAAR,CAAmBC,WAAnB,CAA+BC,eAApC,EAAqD;AACnD,UAAMA,kBAAkBX,QAAQY,gBAAR,CAAyBQ,SAAzB,CAAmCD,QAAQE,QAAR,CAAiBC,MAApD,CAAxB;AACAhB,cAAQG,UAAR,CAAmBC,WAAnB,CAA+BQ,IAA/B,GAAsCP,eAAtC;AACD;AACDX,YAAQgB,OAAR,CAAgBO,MAAhB,CAAuBjB,OAAvB,EAAgC,gCAAhC;AACD,GAjBiC,EAkBlC,UAACA,OAAD,EAAUa,OAAV,EAAsB;AACpBb,YAAQG,UAAR,CAAmBC,WAAnB,CAA+Bc,SAA/B,GAA2CL,QAAQE,QAAnD;AACArB,YAAQgB,OAAR,CAAgBS,IAAhB,CAAqBnB,OAArB;AACD,GArBiC,EAsBlC,UAACA,OAAD,EAAUa,OAAV,EAAsB;AACpBb,YAAQG,UAAR,CAAmBC,WAAnB,CAA+BgB,IAA/B,GAAsCP,QAAQE,QAA9C;AACA,QAAMM,qBAAqBrB,QAAQG,UAAR,CAAmBC,WAA9C;AACA,iCAAmBkB,OAAnB,CAA2BD,kBAA3B;AACA3B,YAAQgB,OAAR,CAAgBS,IAAhB,CAAqBnB,OAArB,cAAwCqB,mBAAmBD,IAA3D,mCAA4FC,mBAAmBH,SAA/G,oBAAuIG,mBAAmBT,IAA1J;AACAZ,YAAQuB,SAAR;AACD,GA5BiC,CAApC;AA8BD,CA/BD;;AAiCO,IAAMxB,4DAA0B,aAAhC;kBACQH,yB","file":"reservation.js","sourcesContent":["const builder = require('botbuilder');\r\nimport { reservationService } from \"../../database\";\r\nimport { ENTITY_NAMES } from '../constants';\r\n\r\nconst registerReservationDialog = bot => {\r\n  bot.dialog(RESERVATION_DIALOG_NAME, [\r\n    (session, args, next) => {\r\n      session.dialogData.reservation = {};\r\n      const reservationDate = builder.EntityRecognizer.findEntity(args.entities, ENTITY_NAMES.DATE_TIME);\r\n      if (!reservationDate) {\r\n        builder.Prompts.time(session, \"Yes I can make a booking for you. What time would you like to book?\");\r\n      } else {\r\n        session.dialogData.reservation.date = reservationDate;\r\n        next();\r\n      }\r\n    },\r\n    (session, results) => {\r\n      if (!session.dialogData.reservation.reservationDate) {\r\n        const reservationDate = builder.EntityRecognizer.parseTime(results.response.entity);\r\n        session.dialogData.reservation.date = reservationDate;\r\n      }\r\n      builder.Prompts.number(session, \"How many people in your group?\");\r\n    },\r\n    (session, results) => {\r\n      session.dialogData.reservation.groupSize = results.response;\r\n      builder.Prompts.text(session, `Can I have a name for the booking?`);\r\n    },\r\n    (session, results) => {\r\n      session.dialogData.reservation.name = results.response;\r\n      const reservationDetails = session.dialogData.reservation;\r\n      reservationService.addItem(reservationDetails);\r\n      builder.Prompts.text(session, `Thanks ${reservationDetails.name} we'll make a booking for ${reservationDetails.groupSize} people, on ${reservationDetails.date}.`);\r\n      session.endDialog();\r\n    }\r\n  ]);\r\n};\r\n\r\nexport const RESERVATION_DIALOG_NAME = 'reservation';\r\nexport default registerReservationDialog;"]}