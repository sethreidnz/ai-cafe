{"version":3,"sources":["../../src/database/database-collection-service.js"],"names":["uuidv4","require","DatabaseCollectionService","documentClient","databaseId","collectionId","collection","init","bind","createDatabase","find","addItem","upsertItem","getItem","deleteItem","getOrCreateCollection","error","console","log","database","getDatabase","databaseResponse","createDatabaseAsync","id","resource","result","querySpec","query","parameters","name","value","queryIterator","queryDatabases","results","toArrayAsync","feed","length","databaseLink","createCollectionAsync","response","getOrCreateDatabase","getCollection","_self","createCollection","queryCollections","ensureCollectionExists","queryDocuments","item","createDocumentAsync","updatedItem","upsertDocumentAsync","itemId","currentItem","Error","deleteDocumentAsync"],"mappings":"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","file":"database-collection-service.js","sourcesContent":["const uuidv4 = require(\"uuid/v4\");\r\n\r\nexport class DatabaseCollectionService {\r\n  constructor(documentClient, databaseId, collectionId) {\r\n    this.documentClient = documentClient;\r\n    this.databaseId = databaseId;\r\n    this.collectionId = collectionId;\r\n    this.collection = null;\r\n    this.init.bind(this);\r\n    this.createDatabase.bind(this);\r\n    this.find.bind(this);\r\n    this.addItem.bind(this);\r\n    this.upsertItem.bind(this);\r\n    this.getItem.bind(this);\r\n    this.deleteItem.bind(this);\r\n  }\r\n\r\n  async ensureCollectionExists() {\r\n    if (this.collection) return;\r\n    await this.init();\r\n  }\r\n\r\n  async init() {\r\n    try {\r\n      const collection = await this.getOrCreateCollection(\r\n        this.databaseId,\r\n        this.collectionId,\r\n      );\r\n      this.collection = collection;\r\n      return this;\r\n    } catch (error) {\r\n      console.error(\r\n        `Error initializing database collection service for database: '${\r\n          this.databaseId\r\n        }', collectionId: '${this.collectionId}'`,\r\n      );\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async getOrCreateDatabase(databaseId) {\r\n    let database = await this.getDatabase(databaseId);\r\n    if (!database) {\r\n      database = this.createDatabase(databaseId);\r\n    }\r\n    return database;\r\n  }\r\n\r\n  async createDatabase(databaseId) {\r\n    const databaseResponse = await this.documentClient.createDatabaseAsync({\r\n      id: databaseId,\r\n    });\r\n    return databaseResponse.resource;\r\n  }\r\n\r\n  async getDatabase(databaseId) {\r\n    let result;\r\n    const querySpec = {\r\n      query: 'SELECT * FROM root r WHERE  r.id = @id',\r\n      parameters: [\r\n        {\r\n          name: '@id',\r\n          value: databaseId,\r\n        },\r\n      ],\r\n    };\r\n    const queryIterator = await this.documentClient.queryDatabases(querySpec);\r\n    const results = await queryIterator.toArrayAsync();\r\n    return results.feed.length !== 0 ? results.feed[0] : null;\r\n  }\r\n\r\n  async createCollection(databaseLink, collectionId) {\r\n    const databaseResponse = await this.documentClient.createCollectionAsync(\r\n      databaseLink,\r\n      {\r\n        id: collectionId,\r\n      },\r\n    );\r\n    return databaseResponse.response;\r\n  }\r\n\r\n  async getOrCreateCollection(databaseId, collectionId) {\r\n    const database = await this.getOrCreateDatabase(databaseId);\r\n    let collection = await this.getCollection(database._self, collectionId);\r\n    if (!collection) {\r\n      collection = this.createCollection(database._self, collectionId);\r\n    }\r\n    return collection;\r\n  }\r\n\r\n  async getCollection(databaseLink, collectionId) {\r\n    let result;\r\n    const querySpec = {\r\n      query: 'SELECT * FROM root r WHERE r.id=@id',\r\n      parameters: [\r\n        {\r\n          name: '@id',\r\n          value: collectionId,\r\n        },\r\n      ],\r\n    };\r\n    const queryIterator = await this.documentClient.queryCollections(\r\n      databaseLink,\r\n      querySpec,\r\n    );\r\n    const results = await queryIterator.toArrayAsync();\r\n    return results.feed.length !== 0 ? results.feed[0] : null;\r\n  }\r\n\r\n  async getAll() {\r\n    await this.ensureCollectionExists();\r\n    const results = await this.find('SELECT * from c');\r\n    return results;\r\n  }\r\n\r\n  async find(querySpec) {\r\n    await this.ensureCollectionExists();\r\n    const queryIterator = await this.documentClient.queryDocuments(this.collection._self, querySpec);\r\n    const results = await queryIterator.toArrayAsync();\r\n    return results.feed;\r\n  }\r\n\r\n  async addItem(item) {\r\n    await this.ensureCollectionExists();\r\n    item.id = uuidv4();\r\n    await this.documentClient.createDocumentAsync(this.collection._self, item);\r\n    return item;\r\n  }\r\n\r\n  async upsertItem(updatedItem) {\r\n    await this.ensureCollectionExists();\r\n    await this.documentClient.upsertDocumentAsync(this.collection._self, updatedItem);\r\n    return updatedItem;\r\n  }\r\n\r\n  async getItem(itemId) {\r\n    await this.ensureCollectionExists();\r\n    const querySpec = {\r\n      query: 'SELECT * FROM root r WHERE r.id = @id',\r\n      parameters: [{ name: '@id', value: itemId }],\r\n    };\r\n    const queryIterator = await this.documentClient.queryDocuments(this.collection._self, querySpec);\r\n    const results = await queryIterator.toArrayAsync();\r\n    return results.feed[0];\r\n  }\r\n\r\n  async deleteItem(itemId) {\r\n    await this.ensureCollectionExists();\r\n    const currentItem = await this.getItem(itemId);\r\n    if (!currentItem) {\r\n      throw new Error(`Cannot delete item ${itemId} because it doesn't exist.`);\r\n    }\r\n    return await this.documentClient.deleteDocumentAsync(currentItem._self);\r\n  }\r\n}\r\n"]}